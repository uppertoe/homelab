# =============================
# Global configuration
# =============================
{
	email {$CADDY_EMAIL}
}

# =============================
# Snippets
# =============================
(basic-auth) {
	basic_auth / {
		{$PROXY_USERNAME} {$PROXY_PASSWORD_HASHED}
	}
}

# Check whether a valid authorisation cookie exists
(proxy-auth) {
	# Check credentials
	# *variable* performs a fast substring match
	@pass-auth {
		# Matches OR
		header Cookie *proxy-id={$PROXY_COOKIE_ID}*
		header Cookie *proxy-id={$PROXY_COOKIE_ID_PREVIOUS}*
	}

	# If authenticated, continue (and remove a referer cookie if exists)
	handle @pass-auth {
        header Set-Cookie "proxy-referer=; Path=/; Domain=.{$DOMAIN}; expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly; SameSite=Lax; Secure"
	}

	# Otherwise, redirect to auth
	handle {
		header Set-Cookie "proxy-referer={scheme}://{host}{uri}; Path=/; Domain=.{$DOMAIN}; Max-Age=300; HttpOnly; SameSite=Lax; Secure"
		header +Set-Cookie "proxy-id=; Path=/; Domain=.{$DOMAIN}; expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly; SameSite=Lax; Secure"
		redir https://auth.{$DOMAIN}
	}
}

# =============================
# Site blocks
# =============================

# Store the referring site, perform authentication, and 
auth.{$DOMAIN} {
	route / {
		# Check if auth has been reached without a referer
		@no-cookie not header Cookie *proxy-referer=*

		handle @no-cookie {
			respond "Forbidden: This route requires a referer" 403 {
				close
			}
		}

		# require authentication
		import basic-auth

		# upon successful auth, set a client token
		header Set-Cookie "proxy-id={$PROXY_COOKIE_ID}; Path=/; Domain=.{$DOMAIN}; Max-Age={$CADDY_LOGIN_TIMEOUT}; HttpOnly; SameSite=Lax; Secure"

        # Remove the referer cookie
        header +Set-Cookie "proxy-referer=; Path=/; Domain=.{$DOMAIN}; expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly; SameSite=Lax; Secure"

		# redirect back to the original site
		redir {http.request.cookie.proxy-referer}
	}

	# fallback
	respond "Access denied" 403 {
		close
	}
}

#########################
#------Local Routes-----#
#########################

# Flame Dashboard
{$DOMAIN} {
	import proxy-auth
	reverse_proxy flame:5005
}

# Pi-hole Admin Interface
pihole.{$DOMAIN} {
    import proxy-auth
	reverse_proxy pihole:80

	@root path /
	redir @root /admin 301
}

# Wireguard-easy Web Interface
wireguard.{$DOMAIN} {
	import proxy-auth
	reverse_proxy wg-easy:51821
}

# Homeassistant Web Interface
homeassistant.{$DOMAIN} {
    reverse_proxy host.docker.internal:8123
}

# Dozzle Web Interface
dozzle.{$DOMAIN} {
	import proxy-auth
	reverse_proxy dozzle:8080
}

# Webhooks
webhook.{$DOMAIN} {
    reverse_proxy webhooks:8000
}

# Zigbee2MQTT
zigbee.{$DOMAIN} {
    import proxy-auth
    reverse_proxy zigbee2mqtt:8080
}

# Nodered
nodered.{$DOMAIN} {
    import proxy-auth
    reverse_proxy nodered:1880
}

# Backrest
backrest.{$DOMAIN} {
    import proxy-auth
    reverse_proxy backrest:9898
}

# Syncthing
sync.{$DOMAIN} {
    import proxy-auth
    reverse_proxy syncthing:8384
}

# Filebrowser
files.{$DOMAIN} {
    import proxy-auth
    reverse_proxy filebrowser:8080
}

# Timetagger
time.{$DOMAIN} {
	reverse_proxy timetagger:80
}

# Frigate
frigate.{$DOMAIN} {
    reverse_proxy https://192.168.4.48:8971 {
        transport http {
            # Bypass certificate validation if Frigate is using a self-signed cert
            tls_insecure_skip_verify
        }
    }
}

# Grocy
grocy.{$DOMAIN} {
	reverse_proxy grocy:80
}