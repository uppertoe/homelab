{
    email {$CADDY_EMAIL}
}

(basic-auth) {
  basic_auth / {
    {$PROXY_USERNAME} {$PROXY_PASSWORD_HASHED}
  }
}

# Check whether a valid authorisation cookie exists
(proxy-auth) {

    # Check credentials
    # *variable* performs a fast substring match
    @fail-auth-current not header Cookie *myid={$PROXY_COOKIE_ID}*

    # Check old credential
    @fail-auth-previous not header Cookie *myid={$PROXY_COOKIE_ID_PREVIOUS}*

    # If not authenticated, redirect to auth
    handle @fail-auth-current {
        
        handle @fail-auth-previous {
            header Set-Cookie "myreferer={scheme}://{host}{uri}; Domain={$DOMAIN}; Path=/; Max-Age=30; HttpOnly; SameSite=Strict; Secure"
            redir https://auth.{$DOMAIN}
        }

    }
}

# Store the referring site, perform authentication, and 
auth.{$DOMAIN} {
  route / {
    # Check if auth has been reached without a referer
    @no-cookie not header Cookie *myreferer=*

    handle @no-cookie {
        respond "Forbidden: This route requires a referer" 403 {
            close
        }
    }

    # Check that the referer is valid
    @invalid-referer not header_regexp Cookie (^|; )myreferer=https://([a-zA-Z0-9-]+\.)*{$DOMAIN//./\\.}(/.*)?(;|$)

    handle @invalid-referer {
        respond "Forbidden: Invalid referer" 403 {
            close
        }
    }

    # require authentication
    import basic-auth
 
    # upon successful auth, set a client token
    header Set-Cookie "myid={$PROXY_COOKIE_ID}; Domain={$DOMAIN}; Path=/; Max-Age={$CADDY_LOGIN_TIMEOUT}; HttpOnly; SameSite=Strict; Secure"
     
    #delete the referer cookie
    header +Set-Cookie "myreferer=; Domain={$DOMAIN}; Path=/; Max-Age=0; HttpOnly; SameSite=Strict; Secure"
     
    # redirect back to the original site
    redir {http.request.cookie.myreferer}
  }
 
  # fallback
  respond "Access denied" 403 {
		close
	}

}

#########################
#------Local Routes-----#
#########################

# Pi-hole Admin Interface
pihole.{$DOMAIN} {
    import proxy-auth
    reverse_proxy pihole:80
    
    @root path /
    redir @root /admin 301
}

# Wireguard-easy Web Interface
wireguard.{$DOMAIN} {
    import proxy-auth
    reverse_proxy wg-easy:51821
}

# Homeassistant Web Interface
homeassistant.{$DOMAIN} {
    import proxy-auth
    reverse_proxy homeassistant:8123
}